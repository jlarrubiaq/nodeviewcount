diff --git a/includes/pages/nodeviewcount.admin.inc b/includes/pages/nodeviewcount.admin.inc
index 497886a..943b3db 100644
--- a/includes/pages/nodeviewcount.admin.inc
+++ b/includes/pages/nodeviewcount.admin.inc
@@ -113,6 +113,13 @@ function nodeviewcount_admin_settings_form($form, &$form_state) {
     '#options' => $options_views_intervals,
     '#default_value' => variable_get('nodeviewcount_views_limit', 0),
   );
+  $form['nodeviewcount_secret_key'] = array(
+    '#title' => t('Secret key'),
+    '#description' => t('Secret key used to generate tokens for URL validation.'),
+    '#type' => 'textfield',
+    '#required' => TRUE,
+    '#default_value' => variable_get('nodeviewcount_secret_key', 'SECRET_KEY'),
+  );
   $form['#submit'][] = 'nodeviewcount_admin_settings_form_submit';
   $form = system_settings_form($form);
   return $form;
diff --git a/includes/pages/nodeviewcount.pages.inc b/includes/pages/nodeviewcount.pages.inc
index 20e19d4..625b942 100644
--- a/includes/pages/nodeviewcount.pages.inc
+++ b/includes/pages/nodeviewcount.pages.inc
@@ -7,9 +7,32 @@
  *   The node for counting.
  * @param object $user
  *   The user for counting.
+ * @param int $timestamp
+ *   When the node was viewed.
+ * @param string $token
+ *   Token generated to verify the URL.
  */
-function nodeviewcount_count_node_view_ajax($node, $user) {
-  if ($node && $user) {
-    nodeviewcount_insert_node_view($node->nid, $user->uid);
+function nodeviewcount_count_node_view_ajax($node, $user, $timestamp, $token) {
+  $is_js_way = (variable_get('nodeviewcount_way_counting', NODEVIEWCOUNT_PHP_WAY_COUNT_VIEWS) == NODEVIEWCOUNT_JS_WAY_COUNT_VIEWS);
+
+  // Process the request only if the JS counting method is the selected.
+  if ($is_js_way) {
+    $token_data = array($node->nid, $user->uid, $timestamp);
+    $recreated_token = _nodeviewcount_create_token($token_data);
+    $is_valid_token = ($token == $recreated_token);
+
+    // Check the request can be trusted through token validation.
+    if ($is_valid_token) {
+      $sessionTimeLimit = _nodeviewcount_get_session_time_limit($node->nid, TRUE);
+      $sessionTimeLimitTs = ($sessionTimeLimit === FALSE) ? 0 : $sessionTimeLimit->getTimestamp();
+
+      // Check the time limit condition is met and the view can be counted.
+      if ($timestamp >= $sessionTimeLimitTs) {
+        if ($node && $user) {
+          $_SESSION['nodeviewcount_views_limit_js'][$node->nid] = $_SESSION['nodeviewcount_views_limit'][$node->nid];
+          nodeviewcount_insert_node_view($node->nid, $user->uid);
+        }
+      }
+    }
   }
-}
+}
\ No newline at end of file
diff --git a/nodeviewcount.install b/nodeviewcount.install
index 53388cc..24fecd4 100644
--- a/nodeviewcount.install
+++ b/nodeviewcount.install
@@ -51,6 +51,7 @@ function nodeviewcount_install() {
   variable_set('nodeviewcount_user_roles', array());
   variable_set('nodeviewcount_way_counting', NODEVIEWCOUNT_PHP_WAY_COUNT_VIEWS);
   variable_set('nodeviewcount_flush_log_timer', 0);
+  nodeviewcount_update_7212();
 }
 
 /**
@@ -61,6 +62,7 @@ function nodeviewcount_uninstall() {
   variable_del('nodeviewcount_user_roles');
   variable_del('nodeviewcount_way_counting');
   variable_del('nodeviewcount_flush_log_timer');
+  variable_del('nodeviewcount_secret_key');
 }
 
 /**
@@ -80,3 +82,10 @@ function nodeviewcount_update_7211() {
     }
   }
 }
+
+/**
+ * Create initial secret key, used to generate validation URL tokens.
+ */
+function nodeviewcount_update_7212() {
+  variable_set('nodeviewcount_secret_key', drupal_random_key());
+}
diff --git a/nodeviewcount.module b/nodeviewcount.module
index e92efd1..cd94eba 100644
--- a/nodeviewcount.module
+++ b/nodeviewcount.module
@@ -19,9 +19,9 @@ function nodeviewcount_menu() {
     'type' => MENU_NORMAL_ITEM,
     'file' => 'includes/pages/nodeviewcount.admin.inc',
   );
-  $items['nodeviewcount/%nodeviewcount_node/%nodeviewcount_user'] = array(
+  $items['nodeviewcount/%nodeviewcount_node/%nodeviewcount_user/%/%'] = array(
     'page callback' => 'nodeviewcount_count_node_view_ajax',
-    'page arguments' => array(1, 2),
+    'page arguments' => array(1, 2, 3, 4),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK,
@@ -98,33 +98,31 @@ function nodeviewcount_node_view($node, $view_mode, $langcode) {
     return FALSE;
   }
   $nid = $node->nid;
-  $firstView = FALSE;
   $way_counting = variable_get('nodeviewcount_way_counting', NODEVIEWCOUNT_PHP_WAY_COUNT_VIEWS);
-  $viewsLimit = variable_get('nodeviewcount_views_limit');
-  if (!isset($viewsLimit)) {
-    $viewsLimit = 0;
-  }
-  $viewsLimitInterval = new DateInterval('PT' . $viewsLimit . 'S');
+
   $dateTime = new DateTime('NOW');
   $dateTime->setTimeZone(new DateTimeZone(date_default_timezone_get()));
   $dateTime->format(DEFAULT_TIME_FORMAT);
-  if (!isset($_SESSION['nodeviewcount_views_limit'][$nid])) {
-    $_SESSION['nodeviewcount_views_limit'][$nid] = $dateTime;
-    $firstView = TRUE;
-  }
-  $sessionTimeLimit = clone $_SESSION['nodeviewcount_views_limit'][$nid];
-  $sessionTimeLimit->add($viewsLimitInterval);
-  if (($dateTime >= $sessionTimeLimit) || $firstView) {
+  $sessionTimeLimit = _nodeviewcount_get_session_time_limit($nid);
+
+  // Check the time limit given by the session, FALSE if it is first view.
+  if (($sessionTimeLimit === FALSE) || ($dateTime >= $sessionTimeLimit)) {
     $_SESSION['nodeviewcount_views_limit'][$nid] = $dateTime;
     if ($way_counting == NODEVIEWCOUNT_PHP_WAY_COUNT_VIEWS) {
       nodeviewcount_insert_node_view($node->nid, $user->uid);
     }
     else {
+      $timestamp = $dateTime->getTimestamp();
+      $token_data = array($node->nid, $user->uid, $timestamp);
+      $token = _nodeviewcount_create_token($token_data);
+
       $js_setting = array(
         'nodeviewcount' => array(
           'nodeviewcount_path' => 'nodeviewcount',
           'nodeviewcount_nid' => $node->nid,
           'nodeviewcount_uid' => $user->uid,
+          'nodeviewcount_timestamp' => $timestamp,
+          'nodeviewcount_token' => $token,
         ),
       );
       drupal_add_js($js_setting, 'setting');
@@ -171,3 +169,46 @@ function nodeviewcount_entity_info() {
   );
   return $info;
 }
+
+/**
+ * Create the token used to verify an URL.
+ *
+ * @param array $data
+ *   URL components (strings) that need to be verified.
+ *
+ * @return string
+ *   The token.
+ */
+function _nodeviewcount_create_token($data) {
+  $key = variable_get('nodeviewcount_secret_key', 'SECRET_KEY');
+  $data = implode(':', $data);
+
+  return drupal_hmac_base64($data, $key);
+}
+
+/**
+ * Get the time limit to count a new view for the node by the current user.
+ *
+ * @param int $nid
+ *   The id of the node viewed.
+ * @param bool $js
+ *   TRUE if the info is required by the menu page callback requested by AJAX,
+ *   FALSE otherwise.
+ *
+ * @return mixed
+ *   The time limit (DateTime) or FALSE if the used session variable is not set
+ *   yet.
+ */
+function _nodeviewcount_get_session_time_limit($nid, $js = FALSE) {
+  $viewsLimit = variable_get('nodeviewcount_views_limit', 0);
+  $session_key = $js ? 'nodeviewcount_views_limit_js' : 'nodeviewcount_views_limit';
+
+  if (!isset($_SESSION[$session_key][$nid])) {
+    return FALSE;
+  }
+  $viewsLimitInterval = new DateInterval('PT' . $viewsLimit . 'S');
+  $sessionTimeLimit = clone $_SESSION[$session_key][$nid];
+  $sessionTimeLimit->add($viewsLimitInterval);
+
+  return $sessionTimeLimit;
+}
diff --git a/theme/js/nodeviewcount.js b/theme/js/nodeviewcount.js
index 7d46f91..d68d127 100644
--- a/theme/js/nodeviewcount.js
+++ b/theme/js/nodeviewcount.js
@@ -1,9 +1,11 @@
 jQuery(document).ready(function($) {
   var nodeviewcount_insert_node_view = function(nid, uid) {
     var nodeviewcount_path = Drupal.settings.nodeviewcount.nodeviewcount_path;
+    var nodeviewcount_timestamp = Drupal.settings.nodeviewcount.nodeviewcount_timestamp;
+    var nodeviewcount_token = Drupal.settings.nodeviewcount.nodeviewcount_token;
     $.ajax({
       type: 'POST',
-      url: Drupal.settings.basePath + nodeviewcount_path + '/' + nid + '/' + uid,
+      url: Drupal.settings.basePath + nodeviewcount_path + '/' + nid + '/' + uid + '/' + nodeviewcount_timestamp + '/' + nodeviewcount_token,
       dataType: 'json'
     });
   }
